{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOADED, USER_LOADING, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_SUCCESS, RESET_PASSWORD, CHANGE_PASSWORD, AUTH_ERROR } from './types';\nconst api = axios.create({\n  baseURL: `http://localhost:8000`\n});\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  api.get(`/auth/secret`, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n    console.log(res.data);\n  }).catch(err => {\n    console.log(\"In auth\");\n  });\n}; // LOGIN USER\n\nexport const login = (email, password) => dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  api.post('/auth/login', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    console.log(res.data);\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: err\n    });\n  });\n}; // REGISTER USER\n\nexport const register = ({\n  first_name,\n  last_name,\n  password,\n  email,\n  mobile\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    mobile\n  });\n  api.post('/auth/register', body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: err\n    });\n  });\n}; // RESET PASSWORD USER\n\nexport const resetPassword = email => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log(email); // Request Body\n\n  const body = JSON.stringify({\n    email\n  });\n  api.post('/auth/reset', body, config).then(res => {\n    dispatch({\n      type: RESET_PASSWORD,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: err\n    });\n  });\n}; // PASSWORD CHANGE\n\nexport const changePassword = (newpassword, resetLink) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${resetLink}`\n    }\n  };\n  console.log(newpassword, resetLink); // Request Body\n\n  const body = JSON.stringify({\n    newpassword,\n    resetLink\n  });\n  console.log(body);\n  api.put('/auth/reset', body, config).then(res => {\n    dispatch({\n      type: CHANGE_PASSWORD,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: err\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  console.log(\"logged out\");\n  api.post('api/auth/logout/', null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: res\n    });\n    console.log(\"logout Success\");\n  }).catch(err => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: err\n    });\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/joan/Documents/Louji/Project/nextbooks/web/Book/src/Store/Action/auth.js"],"names":["axios","USER_LOADED","USER_LOADING","LOGIN_SUCCESS","LOGOUT_SUCCESS","REGISTER_SUCCESS","RESET_PASSWORD","CHANGE_PASSWORD","AUTH_ERROR","api","create","baseURL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","console","log","catch","err","login","email","password","config","headers","body","JSON","stringify","post","register","first_name","last_name","mobile","resetPassword","changePassword","newpassword","resetLink","put","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  LOGIN_SUCCESS,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  RESET_PASSWORD,\n  CHANGE_PASSWORD,\n  AUTH_ERROR,\n} from './types';\n\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000`\n})\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({ type: USER_LOADING });\n  api\n    .get(`/auth/secret`, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n      console.log(res.data)\n    })\n    .catch((err) => {\n      console.log(\"In auth\")\n\n    });\n};\n\n// LOGIN USER\nexport const login = (email, password) => (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  // Request Body\n  const body = JSON.stringify({ email, password });\n\n  api\n    .post('/auth/login', body, config)\n    .then((res) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n      console.log(res.data)\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err\n      })\n    });\n};\n\n// REGISTER USER\nexport const register = ({ first_name,last_name, password, email, mobile }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ first_name,last_name, email, password, mobile });\n\n  api\n    .post('/auth/register', body, config)\n    .then((res) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err\n      })\n    });\n};\n\n// RESET PASSWORD USER\nexport const resetPassword = ( email ) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  console.log(email)\n  // Request Body\n  const body = JSON.stringify({ email });\n\n  api\n    .post('/auth/reset', body, config)\n    .then((res) => {\n      dispatch({\n        type: RESET_PASSWORD,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err\n      })\n    });\n};\n\n// PASSWORD CHANGE\nexport const changePassword = ( newpassword, resetLink ) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${resetLink}`,\n    \n    },\n  };\n  console.log(newpassword,resetLink)\n  // Request Body\n  const body = JSON.stringify({ newpassword, resetLink });\n  console.log(body)\n  api\n    .put('/auth/reset', body, config)\n    .then((res) => {\n      dispatch({\n        type: CHANGE_PASSWORD,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err\n      })\n    });\n};\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n  console.log(\"logged out\")\n  api\n    .post('api/auth/logout/', null, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: LOGOUT_SUCCESS,\n        payload: res\n      });\n      console.log(\"logout Success\")\n    })\n    .catch((err) => {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err\n      })\n    });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return config;\n};"]},"metadata":{},"sourceType":"module"}