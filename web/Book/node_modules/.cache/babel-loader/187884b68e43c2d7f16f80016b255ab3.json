{"ast":null,"code":"import axios from 'axios';\nimport { ACCOUNTS_LOADED, ACCOUNTS_LOADING, ACCOUNT_CREATED, ACCOUNT_DELETED, ACCOUNT_UPDATED, ACCOUNT_ERROR } from './types';\nconst api = axios.create({\n  baseURL: `http://localhost:8000`\n}); //  Load Accounts \n\nexport const loadAccount = () => (dispatch, getState) => {\n  dispatch({\n    type: ACCOUNTS_LOADING\n  });\n  api.get(`/account/`, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: ACCOUNTS_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: ACCOUNT_ERROR,\n      payload: err\n    });\n  });\n}; //  Add a new Account\n\nexport const addAccount = (account_id, account_name, account_type, initialBalance, account_provider) => (dispatch, getState) => {\n  // Request Body\n  const body = JSON.stringify({\n    account_id,\n    account_name,\n    account_type,\n    initialBalance,\n    account_provider\n  });\n  console.log(body);\n  api.post(`/account/create`, body, tokenConfig(getState)).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: ACCOUNT_CREATED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: ACCOUNT_ERROR,\n      payload: err\n    });\n  });\n}; //  Delete a Account\n\nexport const deleteAccount = id => (dispatch, getState) => {\n  // Request Body\n  const body = JSON.stringify({\n    id\n  });\n  console.log(body);\n  api.post(`/account/delete`, body, tokenConfig(getState)).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: ACCOUNT_DELETED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: ACCOUNT_ERROR,\n      payload: err\n    });\n  });\n}; //  Update a new Account\n\nexport const updateAccount = (id, account_name, account_type, account_provider) => (dispatch, getState) => {\n  // Request Body\n  const body = JSON.stringify({\n    id,\n    account_name,\n    account_type,\n    account_provider\n  });\n  console.log(body);\n  api.post(`/account/update`, body, tokenConfig(getState)).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: ACCOUNT_UPDATED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: ACCOUNT_ERROR,\n      payload: err\n    });\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/joan/Documents/Louji/Project/nextbooks/web/Book/src/Store/Action/account.js"],"names":["axios","ACCOUNTS_LOADED","ACCOUNTS_LOADING","ACCOUNT_CREATED","ACCOUNT_DELETED","ACCOUNT_UPDATED","ACCOUNT_ERROR","api","create","baseURL","loadAccount","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","addAccount","account_id","account_name","account_type","initialBalance","account_provider","body","JSON","stringify","console","log","post","deleteAccount","id","updateAccount","token","auth","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,eADJ,EAEIC,gBAFJ,EAGIC,eAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,aANJ,QAOO,SAPP;AAUA,MAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAG;AADa,CAAb,CAAZ,C,CAIA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACvDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACAK,EAAAA,GAAG,CACAO,GADH,CACQ,WADR,EACoBC,WAAW,CAACH,QAAD,CAD/B,EAEGI,IAFH,CAESC,GAAD,IAAS;AACbN,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEZ,eADC;AAEPiB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACZV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,aADD;AAELY,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH,GAbH;AAcD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,UAAD,EAAaC,YAAb,EAA2BC,YAA3B,EAAyCC,cAAzC,EAAyDC,gBAAzD,KAA8E,CAAChB,QAAD,EAAWC,QAAX,KAAwB;AAE5H;AACA,QAAMgB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,UAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,YAA3B;AAAyCC,IAAAA,cAAzC;AAAyDC,IAAAA;AAAzD,GAAf,CAAb;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACArB,EAAAA,GAAG,CACA0B,IADH,CACS,iBADT,EAC2BL,IAD3B,EACiCb,WAAW,CAACH,QAAD,CAD5C,EAEGI,IAFH,CAESC,GAAD,IAAS;AACbc,IAAAA,OAAO,CAACC,GAAR,CAAYf,GAAG,CAACE,IAAhB;AACAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEV,eADC;AAEPe,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GARH,EASGC,KATH,CASUC,GAAD,IAAS;AACdV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,aADD;AAELY,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAID,GAdH;AAeH,CApBM,C,CAsBP;;AACA,OAAO,MAAMa,aAAa,GAAIC,EAAD,IAAQ,CAACxB,QAAD,EAAWC,QAAX,KAAwB;AAEzD;AACA,QAAMgB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEK,IAAAA;AAAF,GAAf,CAAb;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACArB,EAAAA,GAAG,CACA0B,IADH,CACS,iBADT,EAC2BL,IAD3B,EACiCb,WAAW,CAACH,QAAD,CAD5C,EAEGI,IAFH,CAESC,GAAD,IAAS;AACbc,IAAAA,OAAO,CAACC,GAAR,CAAYf,GAAG,CAACE,IAAhB;AACAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,eADC;AAEPc,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GARH,EASGC,KATH,CASUC,GAAD,IAAS;AACdV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,aADD;AAELY,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAID,GAdH;AAeH,CApBM,C,CAsBP;;AACA,OAAO,MAAMe,aAAa,GAAG,CAACD,EAAD,EAAKX,YAAL,EAAmBC,YAAnB,EAAiCE,gBAAjC,KAAsD,CAAChB,QAAD,EAAWC,QAAX,KAAwB;AAEvG;AACA,QAAMgB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEK,IAAAA,EAAF;AAAMX,IAAAA,YAAN;AAAoBC,IAAAA,YAApB;AAAkCE,IAAAA;AAAlC,GAAf,CAAb;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACArB,EAAAA,GAAG,CACA0B,IADH,CACS,iBADT,EAC2BL,IAD3B,EACiCb,WAAW,CAACH,QAAD,CAD5C,EAEGI,IAFH,CAESC,GAAD,IAAS;AACbc,IAAAA,OAAO,CAACC,GAAR,CAAYf,GAAG,CAACE,IAAhB;AACAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,eADC;AAEPa,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GARH,EASGC,KATH,CASUC,GAAD,IAAS;AACdV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP,aADD;AAELY,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAID,GAdH;AAeH,CApBM,C,CAsBP;;AACA,OAAO,MAAMN,WAAW,GAAIH,QAAD,IAAc;AACvC,QAAMyB,KAAK,GAAGzB,QAAQ,GAAG0B,IAAX,CAAgBD,KAA9B;AACA,QAAME,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAIH,KAAJ,EAAW;AACTE,IAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAmC,UAASH,KAAM,EAAlD;AACD;;AAED,SAAOE,MAAP;AACD,CAbM","sourcesContent":["import axios from 'axios';\nimport {\n    ACCOUNTS_LOADED,\n    ACCOUNTS_LOADING,\n    ACCOUNT_CREATED,\n    ACCOUNT_DELETED,\n    ACCOUNT_UPDATED,\n    ACCOUNT_ERROR\n} from './types';\n\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000`\n})\n\n//  Load Accounts \nexport const loadAccount = () => (dispatch, getState) => {\n  dispatch({ type: ACCOUNTS_LOADING });\n  api\n    .get(`/account/`, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: ACCOUNTS_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n        dispatch({ \n            type: ACCOUNT_ERROR,\n            payload: err\n        })\n    });\n};\n\n//  Add a new Account\nexport const addAccount = (account_id, account_name, account_type, initialBalance, account_provider) => (dispatch, getState) => {\n\n    // Request Body\n    const body = JSON.stringify({ account_id,account_name, account_type, initialBalance, account_provider });\n    console.log(body)\n    api\n      .post(`/account/create`, body ,tokenConfig(getState))\n      .then((res) => {\n        console.log(res.data)\n        dispatch({\n          type: ACCOUNT_CREATED,\n          payload: res.data,\n        });\n      })\n      .catch((err) => {\n        dispatch({ \n            type: ACCOUNT_ERROR,\n            payload: err\n        })\n      });\n};\n\n//  Delete a Account\nexport const deleteAccount = (id) => (dispatch, getState) => {\n\n    // Request Body\n    const body = JSON.stringify({ id });\n    console.log(body)\n    api\n      .post(`/account/delete`, body ,tokenConfig(getState))\n      .then((res) => {\n        console.log(res.data)\n        dispatch({\n          type: ACCOUNT_DELETED,\n          payload: res.data,\n        });\n      })\n      .catch((err) => {\n        dispatch({ \n            type: ACCOUNT_ERROR,\n            payload: err\n        })\n      });\n};\n\n//  Update a new Account\nexport const updateAccount = (id, account_name, account_type, account_provider) => (dispatch, getState) => {\n\n    // Request Body\n    const body = JSON.stringify({ id, account_name, account_type, account_provider });\n    console.log(body)\n    api\n      .post(`/account/update`, body ,tokenConfig(getState))\n      .then((res) => {\n        console.log(res.data)\n        dispatch({\n          type: ACCOUNT_UPDATED,\n          payload: res.data,\n        });\n      })\n      .catch((err) => {\n        dispatch({ \n            type: ACCOUNT_ERROR,\n            payload: err\n        })\n      });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return config;\n};"]},"metadata":{},"sourceType":"module"}