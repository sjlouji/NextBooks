{"ast":null,"code":"import axios from 'axios';\nimport { TRANSCATION_LOADED, TRANSCATION_LOADING, TRANSCATION_CREATED, TRANSCATION_DELETED } from './types';\nconst api = axios.create({\n  baseURL: `http://localhost:8000`\n}); //  Load Accounts \n\nexport const loadTranscation = () => (dispatch, getState) => {\n  dispatch({\n    type: TRANSCATION_LOADING\n  });\n  api.get(`/transcation`, tokenConfig(getState)).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: TRANSCATION_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n}; //  Add a new Account\n\nexport const addTranscation = (description, transcation_type, amount, account, debit, category) => (dispatch, getState) => {\n  // Request Body\n  const body = JSON.stringify({\n    description,\n    transcation_type,\n    amount,\n    account,\n    debit,\n    category\n  });\n  console.log(body);\n  api.post(`/transcation/create`, body, tokenConfig(getState)).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: TRANSCATION_CREATED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n}; //  Delete a Account\n\nexport const deleteTranscation = id => (dispatch, getState) => {\n  // Request Body\n  const body = JSON.stringify({\n    id\n  });\n  console.log(body);\n  api.post(`/transcation/delete`, body, tokenConfig(getState)).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: TRANSCATION_DELETED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n}; // //  Update a new Account\n// export const updateAccount = (id, account_name, account_type, account_provider) => (dispatch, getState) => {\n//     // Request Body\n//     const body = JSON.stringify({ id, account_name, account_type, account_provider });\n//     console.log(body)\n//     api\n//       .post(`/account/update`, body ,tokenConfig(getState))\n//       .then((res) => {\n//         console.log(res.data)\n//         dispatch({\n//           type: ACCOUNT_UPDATED,\n//           payload: res.data,\n//         });\n//       })\n//       .catch((err) => {\n//         dispatch({ \n//             type: ACCOUNT_ERROR,\n//             payload: err\n//         })\n//       });\n// };\n// Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/joan/Documents/Louji/Project/nextbooks/web/Book/src/Store/Action/transcation.js"],"names":["axios","TRANSCATION_LOADED","TRANSCATION_LOADING","TRANSCATION_CREATED","TRANSCATION_DELETED","api","create","baseURL","loadTranscation","dispatch","getState","type","get","tokenConfig","then","res","console","log","data","payload","catch","err","addTranscation","description","transcation_type","amount","account","debit","category","body","JSON","stringify","post","deleteTranscation","id","token","auth","config","headers"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    TRANSCATION_LOADED,\n    TRANSCATION_LOADING,\n    TRANSCATION_CREATED,\n    TRANSCATION_DELETED\n} from './types';\n\n\nconst api = axios.create({\n  baseURL: `http://localhost:8000`\n})\n\n//  Load Accounts \nexport const loadTranscation = () => (dispatch, getState) => {\n  dispatch({ type: TRANSCATION_LOADING });\n  api\n    .get(`/transcation`, tokenConfig(getState))\n    .then((res) => {\n      console.log(res.data)\n      dispatch({\n        type: TRANSCATION_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n        console.log(err)\n    });\n};\n\n//  Add a new Account\nexport const addTranscation = (description, transcation_type, amount, account, debit, category) => (dispatch, getState) => {\n\n    // Request Body\n    const body = JSON.stringify({ description, transcation_type, amount, account, debit, category });\n    console.log(body)\n    api\n      .post(`/transcation/create`, body ,tokenConfig(getState))\n      .then((res) => {\n        console.log(res.data)\n        dispatch({\n          type: TRANSCATION_CREATED,\n          payload: res.data,\n        });\n      })\n      .catch((err) => {\n        console.log(err)\n      });\n};\n\n//  Delete a Account\nexport const deleteTranscation = (id) => (dispatch, getState) => {\n\n    // Request Body\n    const body = JSON.stringify({ id });\n    console.log(body)\n    api\n      .post(`/transcation/delete`, body ,tokenConfig(getState))\n      .then((res) => {\n        console.log(res.data)\n        dispatch({\n          type: TRANSCATION_DELETED,\n          payload: res.data,\n        });\n      })\n      .catch((err) => {\n          console.log(err)\n      });\n};\n\n// //  Update a new Account\n// export const updateAccount = (id, account_name, account_type, account_provider) => (dispatch, getState) => {\n\n//     // Request Body\n//     const body = JSON.stringify({ id, account_name, account_type, account_provider });\n//     console.log(body)\n//     api\n//       .post(`/account/update`, body ,tokenConfig(getState))\n//       .then((res) => {\n//         console.log(res.data)\n//         dispatch({\n//           type: ACCOUNT_UPDATED,\n//           payload: res.data,\n//         });\n//       })\n//       .catch((err) => {\n//         dispatch({ \n//             type: ACCOUNT_ERROR,\n//             payload: err\n//         })\n//       });\n// };\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  return config;\n};"]},"metadata":{},"sourceType":"module"}